"""
Django settings for AdaptiveArtemisNewsRecommendation project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*k(713agrm1@+ql4xwen!ur&p3r521plnm%6f@4mko^f_yc!_8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Setting up user models

ALLOWED_HOSTS = []
AUTH_USER_MODEL = 'users.User'

# Application definition
# order is important.
INSTALLED_APPS = [
    'users',                              # users module
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'recommend',                         # recommend module
    'news',
    'userModeling',
    'rest_framework',
    'corsheaders'                       #  设置 CORS 中间件
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',      # CorsMiddleware 需要在每个请求的响应之前处理跨域规则
]

# CORS_ALLOWED_ORIGINS = [      #  如果你想要指定允许的源，使用这个设置
#     "http://localhost:3000",
# ]

CORS_ORIGIN_ALLOW_ALL = True    # 允许所有域名跨域
CORS_ALLOW_CREDENTIALS = True   # 允许跨域请求包含 cookies
# APPEND_SLASH = True            # 解决重定向问题
# LOGIN_URL = '/users/user/login/'  # 重定向后的路径(LOGIN_URL = '/accounts/login/'是django默认给的路径，如果自己设置了view)
# LOGOUT_URL = '/users/user/logout/'

ROOT_URLCONF = 'AdaptiveArtemisNewsRecommendation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AdaptiveArtemisNewsRecommendation.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        'ENGINE': 'django.db.backends.mysql',         # mysql database
        'NAME': 'news_rss',
        'HOST': 'localhost',                          # 127.0.0.1
        'USER': 'root',
        'PASSWORD': '123456',
        'PORT': 3306
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Celery configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'      #   1)Redis as a Message Broker
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  #   2)The results are stored in Redis
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'                     #   3)Task Serialization and Deserialization
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Dublin'                   #   Setting the time zone



#  Setting up a Celery beat timed task
from celery.schedules import crontab

CELERY_BROKER_URL = 'amqp://localhost'
CELERY_RESULT_BACKEND = 'rpc://'
CELERY_BEAT_SCHEDULE = {
    # 'scrape_every_hour': {
    #     'task': 'scraping.tasks.scrape',
    #     'schedule': 3600.0,                  # Performed hourly
    # },
    'scrape-every-night': {
        'task': 'scraping.tasks.scrape',
        'schedule': crontab(hour=2, minute=0),  # Executed at 2 a.m. every day
    },
}


# logging configuration (Path to the log file)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/celery.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],  # 日志同时输出到文件和控制台
            'level': 'DEBUG',
            'propagate': True,
        },
        # 如果你希望你自己的应用也有日志输出，可以添加你的应用的 logger 配置
        'userModeling': {
            'handlers': ['file', 'console'],  # 添加 'console' 以便将日志信息输出到控制台
            'level': 'DEBUG',  # 根据需要设定日志等级
            'propagate': True,
        },
    },
}
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/celery.log'),
#             'formatter': 'verbose',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
